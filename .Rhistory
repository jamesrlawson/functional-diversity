0.025969223,
0.025804779,
0.012047481,
0.020857362,
0.034225202,
0.036001867,
0.064823375,
0.088081735,
0.088452064,
0.109117651,
0.108604162,
0.136126122,
0.157241392,
0.155629385,
0.286664786,
0.726998403)
p.adjust(p.vec, "BH")
p.adjust(p.vec, "BH")[10,]
p.adjust(p.vec, "BH")[10]
p.adjust(p.vec, "BH")[10]
View(hydro1)
hydroplots$catchment <- hydro1$catchment
blah <- lm(FDis ~ catchment, data = hydroplots)
summary(blah)
blah <- lm(FDis ~ catchment + AS20YrARI, data = hydroplots)
summary(blah)
blah1 <- lm(FDis ~ AS20YrARI, data = hydroplots)
blah2 <- lm(FDis ~ catchment + AS20YrARI, data = hydroplots)
AICc(blah1, blah2)
?muin
require(MuMIn)
AICc(blah1, blah2)
summary(blah1)
summary(blah2)
modelx <- lm(FDis ~ catchment + CVAnnHSNum.centred + CVAnnHSPeak.centred * MDFMDFSummer.centred, data = hydroplots)
hydroplots$CVAnnHSNum.centred <- hydroplots$CVAnnHSNum - mean(hydroplots$CVAnnHSNum)
hydroplots$CVAnnHSPeak.centred <- hydroplots$CVAnnHSPeak - mean(hydroplots$CVAnnHSPeak)
hydroplots$MDFMDFSummer.centred <- hydroplots$MDFMDFSummer - mean(hydroplots$MDFMDFSummer)
model12 <- lm(FDis ~ CVAnnHSNum.centred + CVAnnHSPeak.centred * MDFMDFSummer.centred, data = hydroplots)
modelx <- lm(FDis ~ catchment + CVAnnHSNum.centred + CVAnnHSPeak.centred * MDFMDFSummer.centred, data = hydroplots)
summary(modelx)
model12 <- lm(FDis ~ CVAnnHSNum.centred + CVAnnHSPeak.centred * MDFMDFSummer.centred, data = hydroplots)
summary(model12)
View(hydro1)
hydro.FDis.signif <- data.frame(cbind(hydroplots["CVMDFWinter"],
hydroplots["CVMDFAutumn"],
hydroplots["CVMDFSpring"],
hydroplots["MDFMDFSummer"],
hydroplots["MDFMDFSpring"],
hydroplots["M_MaxM"],
hydroplots["M_MinM"],
hydroplots["M_MDFM"],
hydroplots["AS20YrARI"],
hydroplots["CVAnnMRateFall"],
hydroplots["CVAnnMRateRise"],
hydroplots["LSPeak"],
hydroplots["CVAnnHSPeak"],
hydroplots["CVAnnHSNum"]#,
,
hydroplots["latinv"],
hydroplots["elevation"],
hydroplots["catchment"]
#                                      hydroplots["MDFMDFAutumn"],
#                                      hydroplots["MDFMDFWinter"],
#                                      hydroplots["BFI"],
#                                      hydroplots["C_MDFM"],
#                                      hydroplots["CVAnnBFI"]
))
hydro.FDis.signif <- data.frame(cbind(hydroplots["CVMDFWinter"],
hydroplots["CVMDFAutumn"],
hydroplots["CVMDFSpring"],
hydroplots["MDFMDFSummer"],
hydroplots["MDFMDFSpring"],
hydroplots["M_MaxM"],
hydroplots["M_MinM"],
hydroplots["M_MDFM"],
hydroplots["AS20YrARI"],
hydroplots["CVAnnMRateFall"],
hydroplots["CVAnnMRateRise"],
hydroplots["CVAnnHSPeak"],
hydroplots["CVAnnHSNum"]#,
,
hydroplots["latinv"],
hydroplots["elevation"],
hydroplots["catchment"]
#                                      hydroplots["MDFMDFAutumn"],
#                                      hydroplots["MDFMDFWinter"],
#                                      hydroplots["BFI"],
#                                      hydroplots["C_MDFM"],
#                                      hydroplots["CVAnnBFI"]
))
cor(hydro.FDis.signif)
View(cor(hydro.FDis.signif))
plot(hydroplots$elevation, hydroplots$FDis)
plot(hydroplots$elevation, hydroplots$CVMDFSpring)
plot(hydroplots$FDis, hydroplots$CVMDFSpring)
plot(hydroplots$elevation, hydroplots$FDis)
blah2 <- lm(FDis ~ elevation + AS20YrARI, data = hydroplots)
summary(blah1)
summary(blah2)
blah2 <- lm(FDis ~ elevation + latinv, data = hydroplots)
summary(blah2)
plot(hydroplots$catchment, hydroplots$FDis)
hydro1 <- read.csv("data/hydro1.csv", header=TRUE)
FDis-lat.lm <- lm(FDis ~ latinv, data = hydroplots)
hydroplots$latinv <- hydro1$latinv
hydroplots$catchment <- hydro1$catchment
hydroplots$elevation <- hydro1$elevation
FDis-lat.lm <- lm(FDis ~ latinv, data = hydroplots)
View(hydroplots)
hydroplots$FDis
FDis-lat.lm <- lm(FDis ~ latinv, data = hydroplots)
hydroplots$latinv
FDis-lat.lm <- lm(FDis ~ latinv, data = hydroplots)
FDis-lat.lm <- lm(hydroplots$FDis ~ hydroplots$latinv)
View(hydroplots)
plot(hydroplots$FDis, hydroplots$latinv)
plot(hydroplots$latinv,hydroplots$FDis)
FDis-lat.lm <- lm(hydroplots$FDis ~ hydroplots$latinv)
FDis-catchment.lm <- lm(FDis ~ catchment, data = hydroplots)
FDis-elevation.lm <- lm(FDis ~ elevation, data = hydroplots)
summary(lm(hydroplots$FDis ~ hydroplots$latinv)))
summary(lm(hydroplots$FDis ~ hydroplots$latinv))
FDis.tests <- getAllStats(hydroplots, hydroplots$FDis, FD)
FDis.tests <- FDis.tests[c(17:39),] # remove incidental variables or p.adjust breaks
FDis.tests$padj.linear <- p.adjust(FDis.tests$pval.linear, method="BH")
FDis.tests$padj.quad <- p.adjust(FDis.tests$pval.quad, method="BH")
write.csv(FDis.tests, "output/stats/FDis-all.csv")
hydroplots <- hydro
catname <- as.factor(categories$cats)
hydroplots$FDis <- FD.dbfd$FDis
hydroplots$FDiv <- FD.dbfd$FDiv
hydroplots$FRic <- FD.dbfd$FRic
hydroplots$FEve <- FD.dbfd$FEve
hydroplots$RaoQ <- FD.dbfd$RaoQ
hydroplots$FGR <- FD.dbfd$FGR
hydroplots$nbsp <- FD.dbfd$nbsp
hydroplots$simpson <- FD.redun$Simpson
hydroplots$FunRao <- FD.redun$FunRao
hydroplots$redun <- FD.redun$FunRedundancy
CWM <- FD.dbfd$CWM
hydroplots$SLA.CWM <- CWM$SLA
hydroplots$seedmass.CWM <- CWM$seedmass
hydroplots$maxheight.CWM <- CWM$maxheight
hydroplots$flowering.period.CWM <- CWM$flowering.period
hydroplots$WD.CWM <- CWM$WD
hydroplots$leafratio.CWM <- CWM$length.width.ratio
#hydroplots$leafarea.CWM <- CWM$length.width.ratio
#hydroplots$leafWidth.CWM <- CWM$leafWidth
#hydroplots$leafLength.CWM <- CWM$leafLength
CWM$woody <- NULL
CWM$lifehistory <- NULL
View(cor(CWM))
pairs(CWM)
FDis.tests <- getAllStats(hydroplots, hydroplots$FDis, FD)
FDis.tests <- FDis.tests[c(17:39),] # remove incidental variables or p.adjust breaks
FDis.tests$padj.linear <- p.adjust(FDis.tests$pval.linear, method="BH")
View(FDis.tests)
FDis.tests <- getAllStats(hydroplots, hydroplots$FDis, FD)
View(FDis.tests)
FDis.tests <- FDis.tests[c(20:42),] # remove incidental variables or p.adjust breaks
FDis.tests$padj.linear <- p.adjust(FDis.tests$pval.linear, method="BH")
write.csv(FDis.tests, "output/stats/FDis-all.csv")
View(FDis.tests)
summary(lm(FDis ~ M_MinM + I(M_MinM)^2))
summary(lm(FDis ~ M_MinM + I(M_MinM)^2), data = hydroplots)
hydroplots$FDis <- FD.dbfd$FDis
summary(lm(FDis ~ M_MinM + I(M_MinM)^2), data = hydroplots)
source("scripts/functions.R")
options(stringsAsFactors = FALSE)
library(plyr)
library(ggplot2)
library(reshape)
library(FD)
library(SYNCSA)
#############################################################################################
############################# GET RELATIVE ABUNDANCES FOR ALL TRAITS ########################
#############################################################################################
alltraits <- read.csv("data/alltraits.csv", header=TRUE)
percentcover <- read.csv("data/percentcover.csv", header=TRUE)
hydro <- read.csv("data/hydro2.csv", header=TRUE)
leafDimensions <- read.csv("data/leafDimensions.csv", header=TRUE, stringsAsFactors = FALSE)
WD <- read.csv("data/WD.csv")
categories <- read.csv("data/categories.csv", header=TRUE)
# remove observations that average less than 1% cover
percentcover <- subset(percentcover, avgcover > 1)
# generate df with total % cover (across all strata) of species at each plot
plotsums <- ddply(percentcover, .(plotID, species), summarise, speciescover = sum(avgcover))
plotcover <- ddply(percentcover, .(plotID), summarise, plotCover = sum(avgcover))
# remove data poor species
allspp <- subset(alltraits, growthform != "F") # remove ferns
# separate out ferns so we can use this in the data density analysis below
ferns <- subset(alltraits, growthform == "F")
# remove fern spp. we're going to add back in to the dataset
ferns <- ferns[-17,] # Pteridium esculentum
#ferns <- ferns[-15,] # Pellaea falcata - adding causes NA's in FD distance matrix
ferns <- ferns[-10,] # Doodia aspera
ferns <- ferns[-8,] # Calochlaena dubia
ferns <- ferns[-5,] # Blechnum nudum
#ferns <- ferns[-1,] # Adiantum aethiopicum - adding causes NA's in FD distance matrix
allspp <- na.omit(allspp)
allspp <- rbind(allspp, alltraits[2,]) # Acacia boormanii
allspp <- rbind(allspp, alltraits[130,]) # Eucalyptus resinifera
allspp <- rbind(allspp, alltraits[135,]) # Eustrephus latifolius
allspp <- rbind(allspp, alltraits[176,]) # Hovea asperifolia subsp. asperifolia
allspp <- rbind(allspp, alltraits[204,]) # Lomandra hystrix
allspp <- rbind(allspp, alltraits[223,]) # Notelaea microcarpa subsp. microcarpa
allspp <- rbind(allspp, alltraits[318,]) # Stephania japonica
allspp <- rbind(allspp, alltraits[348,]) # Waterhousea floribunda
#allspp <- rbind(allspp, alltraits[18,]) # Adiantum aethiopicum
allspp <- rbind(allspp, alltraits[42,]) # Blechnum nudum
allspp <- rbind(allspp, alltraits[53,]) # Calochlaena dubia
allspp <- rbind(allspp, alltraits[112,]) # Doodia aspera
allspp <- rbind(allspp, alltraits[273,]) # Pteridium esculentum
#allspp <- rbind(allspp, alltraits[239,]) # Pellaea falcata
allspp <- allspp[order(allspp$species), ]
# add wood density and leaf dimension data
allspp <- merge(allspp, leafDimensions, all.x=TRUE)
allspp <- merge(allspp, WD, all.x=TRUE)
## add calculated leaf area ##
allspp$leafarea <- allspp$leafLength.mean * allspp$leafWidth.mean * 0.7
##
allspp.cover <- findtraitvals(plotsums, allspp)
allspp.cover <- merge(allspp.cover, plotcover)
### data density ###
allspp.traitcover <- ddply(allspp.cover, .(plotID), summarise, traitcover = sum(speciescover))
allspp.cover <- merge(allspp.cover, allspp.traitcover, by.x = "plotID", by.y = "plotID")
allspp.cover <- relabund(allspp.cover)
ferns.cover <- merge(ferns, percentcover, by.x = "species", by.y = "species")
ferns.totalcover <- ddply(ferns.cover, .(plotID), summarise, totalferncover = sum(avgcover))
dataDensity <- data.frame(cbind("plotID" = unique(allspp.cover$plotID),
"traitcover" = unique(allspp.cover$traitcover),
"totalferncover" = c(1.2,
0,
0,
1.4,
0,
0,
0,
0,
0,
2.6,
0,
0,
0,
0,
0), # values from ferns.totalcover
"plotCover" = unique(allspp.cover$plotCover)))
dataDensity$coverage <- dataDensity$traitcover / dataDensity$plotCover
dataDensity$coverage.withferns <- (dataDensity$traitcover + dataDensity$totalferncover) / (dataDensity$plotCover)
dataDensity$WD = ddply(allspp.cover, .(plotID), summarise, WD = length(na.omit(WD)) / length(WD))$WD
dataDensity$maxheight = ddply(allspp.cover, .(plotID), summarise, maxheight = length(na.omit(maxheight)) / length(maxheight))$maxheight
dataDensity$seedmass = ddply(allspp.cover, .(plotID), summarise, seedmass = length(na.omit(seedmass)) / length(seedmass))$seedmass
dataDensity$SLA = ddply(allspp.cover, .(plotID), summarise, SLA = length(na.omit(SLA)) / length(SLA))$SLA
dataDensity$flowering.period = ddply(allspp.cover, .(plotID), summarise, flowering.period = length(na.omit(flowering.period)) / length(flowering.period))$flowering.period
dataDensity$length.width.ratio = ddply(allspp.cover, .(plotID), summarise, length.width.ratio = length(na.omit(length.width.ratio)) / length(length.width.ratio))$length.width.ratio
dataDensity$traitcover <- NULL
dataDensity$totalferncover <- NULL
dataDensity$plotCover <- NULL
dataDensity$coverage.withferns <- NULL
dataDensity <- format(dataDensity, digits = 3)
#
test <- ddply(allspp.cover, .(plotID), summarise, summedRelCover = (sum(relcover)))
print(test)
rm(test)
traits <- allspp.cover[2]
traits <- cbind(traits, allspp.cover[4:15])
traits$leafLength.mean <- NULL
traits$leafWidth.mean <- NULL
traits$leafarea <- NULL
#traits$length.width.ratio <- NULL
traits$growthform <- NULL
traits$lifehistory <- NULL
traits <- ddply(traits, .(species), unique)
# transform traits
hist(log10(traits$seedmass))
hist(log10(traits$SLA))
hist(log10(traits$maxheight), breaks = 5)
hist((traits$flowering.period)) # non-normal distribution with any common transform
#hist(log10(traits$leafWidth.mean))
#hist(log10(traits$leafLength.mean))
#hist(log10(traits$length.width.ratio))
hist(log10(traits$WD))
#hist(log10(traits$leafarea))
traits$seedmass <- log10(traits$seedmass)
traits$SLA <- log10(traits$SLA)
traits$maxheight <- log10(traits$maxheight)
#traits$leafWidth.mean <- log10(traits$leafWidth.mean)
traits$length.width.ratio <- log10(traits$length.width.ratio)
#traits$leafLength.mean <- log10(traits$leafLength.mean)
traits$WD <- log10(traits$WD)
#traits$leafarea <- log10(traits$leafarea)
traits$woody <- as.numeric(traits$woody)
traits$woody <- NULL
# create abun, in correct input format for FD analysis
abun <- data.frame(allspp.cover[1])
abun <- cbind(abun, allspp.cover[2])
abun <- cbind(abun, allspp.cover[18])
abun <- cast(abun, plotID ~ species, value="relcover", fill=0)
rownames(abun) <- abun$plotID
abun$plotID <- NULL
spp <- traits$species
traits$species <- NULL
rownames(traits) <- spp
rm(spp)
FD.dbfd <- dbFD(traits,
abun,
w.abun = TRUE,  # use presence - absence converted data?
stand.x = FALSE,
corr = c("cailliez"),
#                calc.FGR = TRUE,
#                clust.type = c("kmeans"),
#                km.inf.gr = c(2),
#                km.sup.gr = c(10),
#                km.iter = (100),
#                calc.FDiv = TRUE,
#                calc.FRic = TRUE,
m = "max",
calc.CWM=TRUE,
print.pco=TRUE,
#                scale.RaoQ=TRUE,
#               stand.FRic=TRUE
)
# to use presabs only
abun.presabs <- abun
abun.presabs[abun.presabs>0] <- 1
FD.redun_presabs <- rao.diversity(abun.presabs, traits=traits)
FD.redun <- rao.diversity(abun, traits=traits)
##
hydroplots <- hydro
catname <- as.factor(categories$cats)
hydroplots$FDis <- FD.dbfd$FDis
hydroplots$FDiv <- FD.dbfd$FDiv
hydroplots$FRic <- FD.dbfd$FRic
hydroplots$FEve <- FD.dbfd$FEve
hydroplots$RaoQ <- FD.dbfd$RaoQ
hydroplots$FGR <- FD.dbfd$FGR
hydroplots$nbsp <- FD.dbfd$nbsp
hydroplots$simpson <- FD.redun$Simpson
hydroplots$FunRao <- FD.redun$FunRao
hydroplots$redun <- FD.redun$FunRedundancy
CWM <- FD.dbfd$CWM
hydroplots$SLA.CWM <- CWM$SLA
hydroplots$seedmass.CWM <- CWM$seedmass
hydroplots$maxheight.CWM <- CWM$maxheight
hydroplots$flowering.period.CWM <- CWM$flowering.period
hydroplots$WD.CWM <- CWM$WD
hydroplots$leafratio.CWM <- CWM$length.width.ratio
#hydroplots$leafarea.CWM <- CWM$length.width.ratio
#hydroplots$leafWidth.CWM <- CWM$leafWidth
#hydroplots$leafLength.CWM <- CWM$leafLength
CWM$woody <- NULL
CWM$lifehistory <- NULL
summary(lm(FDis ~ M_MinM, data = hydroplots))
summary(lm(FDis ~ M_MinM + I(M_MinM)^2)), data = hydroplots))
summary(lm(FDis ~ M_MinM + I(M_MinM)^2), data = hydroplots))
summary(lm(FDis ~ M_MinM + I(M_MinM)^2, data = hydroplots))
summary(lm(FDis ~ M_MinM + I(M_MinM^2), data = hydroplots))
summary(lm(FDis ~ M_MinM, data = hydroplots))
summary(lm(FDis ~ M_MinM + I(M_MinM^2), data = hydroplots))
summary(lm(FDis ~ CVAnnHSPeak + I(CVAnnHSPeak^2), data = hydroplots))
FDis.tests <- getAllStats(hydroplots, hydroplots$FDis, FD)
FDis.tests <- FDis.tests[c(20:42),] # remove incidental variables or p.adjust breaks
FDis.tests$padj.linear <- p.adjust(FDis.tests$pval.linear, method="BH")
write.csv(FDis.tests, "output/stats/FDis-all.csv")
summary(lm(FDis ~ M_MinM + I(M_MinM^2), data = hydroplots))
p.vec <- c(0.001014303,
0.003060679,
0.009625127,
0.013393695,
0.014833246,
0.012875004,
0.010989153,
0.025969223,
0.025804779,
0.009421, # this is the p val for the quadratic fit for M_MinM
0.020857362,
0.034225202,
0.036001867,
0.064823375,
0.088081735,
0.088452064,
0.109117651,
0.108604162,
0.136126122,
0.157241392,
0.155629385,
0.286664786,
0.726998403)
p.adjust(p.vec, "BH")[10]
FDis-lat.lm <- lm(FDis ~ latinv, data = hydroplots)
View(hydroplots)
summary(lm(FDis ~ M_MinM + I(M_MinM^2), data = hydroplots))
summary(lm(FDis ~ catchment, data = hydroplots))
summary(lm(FDis ~ latinv, data = hydroplots))
summary(lm(FDis ~ elevation, data = hydroplots))
View(FDis.tests)
source('C:/Users/James/Desktop/stuff/data/analysis/R/functional diversity/scripts/functions.R')
FDis.tests <- getAllStats(hydroplots, hydroplots$FDis, FD)
FDis.tests <- FDis.tests[c(20:42),] # remove incidental variables or p.adjust breaks
FDis.tests$padj.linear <- p.adjust(FDis.tests$pval.linear, method="BH")
write.csv(FDis.tests, "output/stats/FDis-all.csv")
FDis.tests <- getAllStats(hydroplots, hydroplots$FDis, FD)
View(FDis.tests)
FDis.tests <- getAllStats(hydroplots, hydroplots$FDis, FD)
FDis.tests <- FDis.tests[c(19:41),] # remove incidental variables or p.adjust breaks
FDis.tests$padj.linear <- p.adjust(FDis.tests$pval.linear, method="BH")
write.csv(FDis.tests, "output/stats/FDis-all.csv")
p.adjust
?p.adjust
??BH
?multtest
require(multtest)
?multtest
?Bioconductor
browseVignettes("multtest")
?mt.rawp2padjp
mt.rawp2adjp
?mt.rawp2adjp
mt.rawp2adjp(p.vec, "TSBH")
mt.rawp2adjp(p.vec, c("BY", "BH", "ABH", "TSBH")
)
mt.rawp2adjp(p.vec, c("BY", "BH", "ABH", "TSBH"))[1]
mt.rawp2adjp(p.vec, c("BY", "BH", "ABH", "TSBH"))[1,1]
mt.rawp2adjp(p.vec, c("BY", "BH", "ABH", "TSBH"))[1,]
mt.rawp2adjp(p.vec, c("BY", "BH", "ABH", "TSBH"))[1]
blah <- mt.rawp2adjp(p.vec, c("BY", "BH", "ABH", "TSBH"))[1]
blah <- data.frame(mt.rawp2adjp(p.vec, c("BY", "BH", "ABH", "TSBH"))[1])
View(blah)
padjs <- data.frame(mt.rawp2adjp(p.vec, c("BY", "BH", "ABH", "TSBH"))[1])
rm(blah)
padjs$TSBH_0.05
padjs <- data.frame(mt.rawp2adjp(p.vec, c("TSBH"))[1])
FDis.tests$padj.linear <- padjs$TSBH_0.05
View(FDis.tests)
padjs$TSBH_0.05
FDis.tests$padj.linear <- padjs["TSBH_0.05"]
padjs["TSBH_0.05"]
View(padjs)
padjs$adjp.TSBH_0.05
FDis.tests$padj.linear <- padjs$adjp.TSBH_0.05
p.vec <- c(0.001014303,
0.003060679,
0.009625127,
0.013393695,
0.014833246,
0.012875004,
0.010989153,
0.025969223,
0.025804779,
0.009421, # this is the p val for the quadratic fit for M_MinM
0.020857362,
0.034225202,
0.036001867,
0.064823375,
0.088081735,
0.088452064,
0.109117651,
0.108604162,
0.136126122,
0.157241392,
0.155629385,
0.286664786,
0.726998403)
padjs <- data.frame(mt.rawp2adjp(p.vec, c("BY", "BH", "ABH", "TSBH"))[1])
padjs <- data.frame(mt.rawp2adjp(p.vec, c("TSBH"))[1])
View(padjs)
padjs$adjp.TSBH_0.05[10]
View(FDis.tests)
padjs <- data.frame(mt.rawp2adjp(p.vec, c("TSBH"))[1])
View(padjs)
adjp[order(index),]
padj$adjp[order(padj$index),]
padsj$adjp[order(padjs$index),]
padjs$adjp[order(padjs$index),]
View(padjs)
padjs <- mt.rawp2adjp(p.vec, c("TSBH"))
padjs$adjp[order(padjs$index),]
View(FDis.tests)
View(FDis.tests)
padjs <- data.frame(mt.rawp2adjp(p.vec, c("TSBH"))[1])
View(padjs)
padjs <- mt.rawp2adjp(FDis.test$pval, c("TSBH"))
padjs <- mt.rawp2adjp(FDis.tests$pval.linear, c("TSBH"))
padjs$adjp[order(padjs$index),]
padjs <- data.frame(padjs$adjp[order(padjs$index),])
FDis.tests$padj.linear <- padjs$TSBH_0.05
View(FDis.tests)
padjs.M_MinM  <- mt.rawp2adjp(p.vec, c("TSBH"))
padjs.M_MinM  <- data.frame(padjs.M_MinM$adjp[order(padjs.M_MinM$index),])
padjs.M_MinM[10]
padjs.M_MinM  <- mt.rawp2adjp(p.vec, c("TSBH"))
padjs.M_MinM  <- data.frame(padjs.M_MinM$adjp[order(padjs.M_MinM$index),])
padjs.M_MinM$adjp.TSBH_0.05[10]
View(padjs.M_MinM)
padjs.M_MinM$TSBH_0.05[10]
write.csv(FDis.tests, "output/stats/FDis-all.csv")
plot.quad(hydroplots, hydroplots$FDis, FD)
source('C:/Users/James/Desktop/stuff/data/analysis/R/functional diversity/scripts/functions.R')
source('C:/Users/James/Desktop/stuff/data/analysis/R/functional diversity/scripts/functions.R')
source('C:/Users/James/Desktop/stuff/data/analysis/R/functional diversity/scripts/functions.R')
plot.linear(hydroplots, hydroplots$FDis, FD)
source('C:/Users/James/Desktop/stuff/data/analysis/R/functional diversity/scripts/functions.R')
plot.linear(hydroplots, hydroplots$FDis, FD)
source('C:/Users/James/Desktop/stuff/data/analysis/R/functional diversity/scripts/functions.R')
plot.linear(hydroplots, hydroplots$FDis, FD)
?ggplot
p <- ggplot(hydroplots, aes(x = CVAnnHSPeak, y = FDis))
print(p)
hydroplots$FDis
FDis-elevation.lm <- lm(FDis ~ elevation, data = hydroplots)
View(hydroplots)
